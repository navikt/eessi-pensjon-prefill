
no.nav.security.jwt:
 client:
   registration:
     pdl-credentials:
       token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
       grant-type: client_credentials
       scope: api://${AZURE_APP_PDL_CLIENT_ID}/.default
       authentication:
         client-id: ${AZURE_APP_CLIENT_ID}
         client-jwk: ${AZURE_APP_JWK}
         client-auth-method: private_key_jwt
     pen-credentials:
       token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
       grant-type: client_credentials
       scope: api://${AZURE_APP_PEN_CLIENT_ID}/.PEN
       authentication:
         client-id: ${AZURE_APP_CLIENT_ID}
         client-jwk: ${AZURE_APP_JWK}
         client-auth-method: private_key_jwt
     proxy-credentials:
       token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
       grant-type: client_credentials
       scope: api://${AZURE_APP_PROXY_CLIENT_ID}/.default
       authentication:
         client-id: ${AZURE_APP_CLIENT_ID}
         client-jwk: ${AZURE_APP_JWK}
         client-auth-method: private_key_jwt


# Empty on purpose so that oidc-spring-support doesn't use http.proxy
http.proxy.parametername:

METRICS_REQUESTFILTER_ENABLE: false

# TODO: These actuator-endpoints need to be secured before going to production. Also, enable only whats needed.
management:
  endpoints:
    metrics:
      enabled: true
    web:
      exposure:
        include: info, health, metrics, prometheus
    export:
      prometheus:
        enabled: true
    prometheus:
      enabled: true
  metrics:
    web:
      server:
        request:
          autotime:
            enabled: true

eessi:
#  pensjon_lokalnavn: 'NOINST002, NO INST002, NO'
#  pensjon_institusjon: ''
  pensjon_adresse_gate: 'Postboks 6600 Etterstad'
  pensjon_adresse_by:   'Oslo'
  pensjon_adresse_postnummer: '0607'
  pensjon_adresse_land: 'NO'


#Embedded tomcat
server:
  servlet:
    session:
      timeout: '120s'
  error:
    include-message: always

kafka:
  statistikk:
    topic: ${KAFKA_STATISTIKK_TOPICNAME}
  security.protocol: SSL


#Spring
spring:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS_URL}
    properties:
      security.protocol: SASL_SSL
      key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value.deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      sasl:
        mechanism: PLAIN
        jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="${srvusername}" password="${srvpassword}";
  main:
    allow-bean-definition-overriding: true