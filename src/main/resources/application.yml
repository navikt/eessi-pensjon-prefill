
no.nav.security.jwt:
 issuer.aad:
   discoveryurl: ${AZURE_APP_WELL_KNOWN_URL}
   accepted_audience: ${AZURE_APP_CLIENT_ID}
 client:
   registration:
     pdl-credentials:
       token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
       grant-type: client_credentials
       scope: api://${AZURE_APP_PDL_CLIENT_ID}/.default
       authentication:
         client-id: ${AZURE_APP_CLIENT_ID}
         client-jwk: ${AZURE_APP_JWK}
         client-auth-method: private_key_jwt
     krr-credentials:
       token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
       grant-type: client_credentials
       scope: api://${KRR_CLIENT_ID}/.default
       authentication:
         client-id: ${AZURE_APP_CLIENT_ID}
         client-jwk: ${AZURE_APP_JWK}
         client-auth-method: private_key_jwt
     proxy-credentials:
       token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
       grant-type: client_credentials
       scope: api://${AZURE_APP_PROXY_CLIENT_ID}/.default
       authentication:
         client-id: ${AZURE_APP_CLIENT_ID}
         client-jwk: ${AZURE_APP_JWK}
         client-auth-method: private_key_jwt
     proxy-etterlatteUrl:
       token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
       grant-type: client_credentials
       scope: api://${AZURE_APP_ETTERLATTE_CLIENT_ID}/.default
       authentication:
         client-id: ${AZURE_APP_CLIENT_ID}
         client-jwk: ${AZURE_APP_JWK}
         client-auth-method: private_key_jwt
     kodeverk-credentials:
       token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
       grant-type: client_credentials
       scope: api://${AZURE_APP_KODEVERK_CLIENT_ID}/.default
       authentication:
         client-id: ${AZURE_APP_CLIENT_ID}
         client-jwk: ${AZURE_APP_JWK}
         client-auth-method: private_key_jwt


# Empty on purpose so that oidc-spring-support doesn't use http.proxy
http.proxy.parametername:

METRICS_REQUESTFILTER_ENABLE: true

# TODO: These actuator-endpoints need to be secured before going to production. Also, enable only whats needed.
management:
  endpoints:
    metrics:
      enabled: true
    web:
      exposure:
        include: info, health, metrics, prometheus, caches
    export:
      prometheus:
        enabled: true
    prometheus:
      enabled: true
  metrics:
    web:
      server:
        request:
          autotime:
            enabled: true

eessi:
#  pensjon_lokalnavn: 'NOINST002, NO INST002, NO'
#  pensjon_institusjon: ''
  pensjon_adresse_gate: 'Postboks 6600 Etterstad'
  pensjon_adresse_by:   'Oslo'
  pensjon_adresse_postnummer: '0607'
  pensjon_adresse_land: 'NO'


#Embedded tomcat
server:
  servlet:
    session:
      timeout: '120s'
  error:
    include-message: always

kafka:
  security.protocol: SSL


#Spring
spring:
  main:
    allow-bean-definition-overriding: true