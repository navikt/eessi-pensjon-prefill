buildscript {

    ext {
        kotlinVersion = '1.6.21'
        springBootVersion = '2.6.7'
        jacksonModuleKotlinVersion = '2.13.3'
        cxfVersion = '3.3.4'
        tokenSupportVersion = '1.3.9'
        logstashLogbackVersion = '7.0.1'
        pensjonInformasjonVersion = '9.4.10'
        epeuxVersion = '1.1.72'
        epMetricsVersion = '0.4.28'
        epPersonoppslagVersion = '10.2.7'
        epLoggingVersion='1.0.23'
        epPensjonInformasjonVersjon='2.0.14'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion"
    id "org.springframework.boot" version "$springBootVersion"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.openrepose.gradle.plugins.jaxb" version "2.5.0"
    id 'com.github.ben-manes.versions' version '0.42.0'
    id "se.patrikerdes.use-latest-versions" version "0.2.18"
    id "org.owasp.dependencycheck" version "7.0.1"
    id "com.vanniktech.dependency.graph.generator" version "0.7.0"
    id 'com.adarshr.test-logger' version '2.1.1'
    id "org.sonarqube" version "3.3"
    id 'jacoco'
}

assert JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17): "Java 17 or newer is required"

group = 'no.nav.eessi'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
    }
}

jar {
    archivesBaseName = 'eessi-pensjon-prefill'
}

dependencies {

    // Spring-boot
    implementation("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
    implementation("org.springframework.boot:spring-boot-starter-aop:$springBootVersion")
    implementation("org.springframework.boot:spring-boot-starter-cache:$springBootVersion")
    implementation("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")
    implementation("org.springframework.boot:spring-boot-actuator:$springBootVersion")

    // Kotlin
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonModuleKotlinVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonModuleKotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    //flattenmap
    implementation("com.github.wnameless:json-flattener:0.7.1")
    implementation("com.github.wnameless.json:json-flattener:0.13.0")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")
    configurations { all*.exclude group: 'commons-logging', module: 'commons-logging' }
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j'

    // auditlogger syslog la stå som 0.9.30/1.0.0
    implementation("com.papertrailapp:logback-syslog4j:1.0.0")
    implementation("org.syslog4j:syslog4j:0.9.30")

    // OIDC
    implementation("no.nav.security:token-validation-spring:${tokenSupportVersion}")
    implementation("no.nav.security:token-validation-jaxrs:${tokenSupportVersion}")
    implementation("no.nav.security:token-client-spring:${tokenSupportVersion}")
    // Only used for starting up locally
    implementation("no.nav.security:token-validation-test-support:${tokenSupportVersion}")

    implementation ("no.nav.common:token-client:2.2022.04.01_08.27-cbfeb0be0ee0")

    // Micrometer
    implementation('io.micrometer:micrometer-registry-prometheus:1.9.0')

    implementation ('org.springframework.kafka:spring-kafka:2.8.5')

    implementation("no.nav.eessi.pensjon:ep-eux:${epeuxVersion}")
    implementation("no.nav.eessi.pensjon:ep-metrics:$epMetricsVersion")
    implementation("no.nav.eessi.pensjon:ep-logging:${epLoggingVersion}")
    implementation("no.nav.eessi.pensjon:ep-personoppslag:${epPersonoppslagVersion}")
    implementation("no.nav.eessi.pensjon:ep-pensjonsinformasjon:${epPensjonInformasjonVersjon}")

    implementation("no.nav.tjenestespesifikasjoner:pensjonsinformasjon-v1-tjenestespesifikasjon:1.2021.01.21-11.34-02f5eb27bb76")

    //mock - test
    testImplementation("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
        exclude module: 'junit'
        exclude module: "mockito-core"
        exclude module: 'junit-vintage-engine'
    }
    testImplementation ('org.springframework.kafka:spring-kafka-test:2.8.4')
    testImplementation("org.pac4j:spring-webmvc-pac4j:6.0.3")

    testImplementation("org.junit.platform:junit-platform-suite-api:1.8.2")

    testImplementation("org.skyscreamer:jsonassert:1.5.0")
    testImplementation("org.jetbrains.kotlin:kotlin-test:${kotlinVersion}") {
        exclude module: 'kotlin-test-js'
        exclude module: 'kotlin-test-testng'
    }
    testImplementation('io.mockk:mockk:1.12.4')

    // Architecture tests la stå som 0.11.0
    testImplementation ('com.tngtech.archunit:archunit:0.23.1')

    // Forenklere mocking av beans, benyttes som mockito mockbean
    testImplementation('com.ninja-squad:springmockk:3.1.1')
}

test {
    useJUnitPlatform()
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.sonarqube.dependsOn tasks["jacocoTestReport"]

repositories {
    mavenCentral()

    ["maven-release","ep-personoppslag","tjenestespesifikasjoner","ep-metrics", "ep-pensjonsinformasjon"].each { repo ->
        String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
        if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")
        maven {
            url = uri("https://maven.pkg.github.com/navikt/$repo")
            credentials {
                username = "token"
                password = token
            }
        }
    }
}

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    rejectVersionIf {
        ['alpha', 'beta', 'b', 'rc', 'cr', 'm', 'preview', 'pr']
                .any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/}
    }
    revision = 'release'
}
